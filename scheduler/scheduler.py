import logging

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from datetime import datetime, timezone, timedelta

from sqlalchemy import delete, and_, select

logger = logging.getLogger(__name__)


class SchedulerManager:

    def __init__(self):

        self.scheduler = AsyncIOScheduler()

    async def perform_cleanup(self):

        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—á–∏—Å—Ç–∫–∏"""

        logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

        start_time = datetime.now(timezone.utc)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
        messages_deleted = await self.delete_old_messages()
        actions_deleted = await self.delete_old_user_actions()
        users_deleted = await self.delete_inactive_users()

        end_time = datetime.now(timezone.utc)
        duration = (end_time - start_time).total_seconds()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if config.ADMIN_ID and self.bot:
            try:
                message = (
                    f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                    f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫\n"
                    f"üóë –£–¥–∞–ª–µ–Ω–æ:\n"
                    f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_deleted}\n"
                    f"   ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π: {actions_deleted}\n"
                    f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_deleted}"
                )
                await self.bot.send_message(config.ADMIN_ID, message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        logger.info(
            f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥. "
            f"–£–¥–∞–ª–µ–Ω–æ: {messages_deleted} —Å–æ–æ–±—â–µ–Ω–∏–π, "
            f"{actions_deleted} –¥–µ–π—Å—Ç–≤–∏–π, "
            f"{users_deleted} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )

    def setup_scheduler(self):

        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        cleanup_time = config.CLEANUP_TIME.split(":")
        hour, minute = int(cleanup_time[0]), int(cleanup_time[1])

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.scheduler.add_job(
            self.perform_cleanup,
            trigger=CronTrigger(hour=hour, minute=minute),
            id="daily_cleanup",
            name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
            replace_existing=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00)
        self.scheduler.add_job(
            self.send_weekly_stats,
            trigger=CronTrigger(day_of_week=0, hour=10, minute=0),
            id="weekly_stats",
            name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            replace_existing=True
        )

        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤ {hour:02d}:{minute:02d} UTC")

    def start(self):

        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""

        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    def shutdown(self):

        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""

        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
